//Prompt

Question #5: Array Sorting
Write an algorithm that sorts an array without using the sort() method. There are many different sorting algorithms — take the time to read about the following:

Quick sort
Merge sort
Heap sort
Insertion sort
Bubble sort
Selection sort
You may implement any of the above algorithms (or your own) to solve the problem — as long as it doesn't use sort().

Example
Input: [9, 2, 7, 12]

Output: [2, 7, 9, 12]

//Questions
Are you okay if I solve this in JavaScript?
I can expect the example inputs to only include numbers?
Can I use built in methods?
I can't use sort();?




function sortArray(array) {
  for (let i = 0; i < array.length; i++) {  //loop to sort array
    for (let j = i + 1; j < array.length; j++)  //loop to check if 2nd # is greater than 1st #

    if(array[i] > array[j]) {      //if statement for 1st num > 2nd num then switch place
    let temporary = array[i];      // temp = 1st num
    array[i] = array[j];           // 1st num = 2nd num
    array[j] = temporary;          // 2nd num = 1st num
      }
    }
  }
  return array;
}


//Bubble SORT
function sortNumbers(arr) {
    for (let i = 1; i < arr.length; i++) {
        for (let j = 0; j < arr.length; j++) {
            let temp = arr[i];
            if (arr[i] < arr[j]) {
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
    return arr;
}

console.log(sortNumbers([1, 10, 9, 8, 3, 6]))

//insertion sort
Link to documentation: https://stackabuse.com/insertion-sort-in-javascript/


function insertionSort(inputArr) {
        for (let i = 1; i < inputArr.length; i++) {
            // Choosing the first element in our unsorted subarray
            let current = inputArr[i];
            
            // The last element of our sorted subarray  // subarray comparing the two #'s
            let j = i-1; 
            while ((j > -1) && (current < inputArr[j])) {
                inputArr[j+1] = inputArr[j];
                j--;
            }
            inputArr[j+1] = current;
        }
    return inputArr;
}
Question #2: Array Deduping
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.

Example
Input: [7, 9, "hi", 12, "hi", 7, 53]

Output: [7, 9, "hi", 12, 53]

//Questions

Are you okay if I solve this problem with JavaScript?
Can I use built in methods?
I can assume I will only be removing duplicates?
I see in your example I can expect to compare different types strings and integers.  Are those the only values I will need to check for?


//Code
without .filter

let inputtedArray = [7, 9, "hi", 12, "hi", 7, 53];   //instantiate the example input

function removeDuplicates(inputs) {         //create the function remove duplicates with the arguement of inputs
  let replacedArray = [];                   //instantiate an empty array
    inputs.forEach(char => {                // foreach through each input utilizing es6 arrow notation
      if (!replacedArray.includes(char)) {           // if statement using the .includes method checking the new array for each 
        replacedArray.push(char)                         character and pushing those characters to the new array.
      }
    });
    return replacedArray;                       // we then return the replacedArray
}

//test this simplified function

var inputtedArray = [7, 9, "hi", 12, "hi", 7, 53];
const uniq = [...new Set(inputtedArray)];  //spread syntax allows you to access the elements within the array and iteriate on them.  Spread syntax essentially for loops through the array.
console.log(uniq);

With filter

let inputtedArray = [7, 9, "hi", 12, "hi", 7, 53];

function removeDuplicates(arrayValues) {                               //functional (filter does shallow copy)
    return arrayValues.filter((value, index) => arrayValues.indexOf(value) === index);
}
  console.log(removeDuplicates(inputtedArray));

  //expected Output
  [7, 9, "hi", 12, 53]
